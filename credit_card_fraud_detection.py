# -*- coding: utf-8 -*-
"""credit_card_fraud_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eJ-elmHOm8TRJ5eHipKBAzQWp4NfPnDk
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("mlg-ulb/creditcardfraud")

print("Path to dataset files:", path)

# Load the dataset
df = pd.read_csv(path + "/creditcard.csv")
# Preview the data
print(df.head())

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

df.isnull().sum()

X = df.drop('Class', axis=1)  # Features
y = df['Class']  # Target

# Normalize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42, stratify=y)

model = XGBClassifier()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Example scaled test data
test_sample = np.array([[0.5, -1.2, 1.0, 0.8, -0.5, 0.3, 1.1, -0.7, 0.6, -1.0,
                         0.5, -0.4, 0.2, -0.6, 1.2, -1.3, 0.9, -0.8, 0.7, -0.9,
                         1.3, 0.2, -0.3, 0.5, -0.2, 1.5, -0.4, 0.3, 500, 15000]])

# Predict on the test sample
prediction = model.predict(test_sample)

# Output the prediction
if prediction[0] == 1:
    print("The transaction is predicted to be fraudulent.")
else:
    print("The transaction is predicted to be legitimate.")

