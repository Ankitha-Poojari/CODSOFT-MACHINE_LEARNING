# -*- coding: utf-8 -*-
"""Spam_Mail_Detection_Using_ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gW0qInc_KEieiYJKUKx5-OhbmJ7Ai9-3

**SPAM MAIL DETECTION**

IMPORTING THE DEPENDENCIES
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from  sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import kagglehub

# Download latest version
path = kagglehub.dataset_download("venky73/spam-mails-dataset")

print("Path to dataset files:", path)

"""DATA COLLECTION AND PREPROCESSING"""

# LOADING THE DATA FROM CSV FILE TO A PANDAS DATAFRAME
#raw_mail_data = pd.read_csv('/content/spam.csv')
#raw_mail_data = pd.read_csv('/content/spam.csv', encoding='latin-1')
raw_mail_data = pd.read_csv( path, encoding='ISO-8859-1')

# DISPLAYING THE DATASET
print(raw_mail_data)
# THE BELOW DATA SET CONTAINS A LOT OF MISSING VALUES AND NULL VALUES

list(raw_mail_data.columns.values)

raw_mail_data.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], axis=1, inplace=True)

list(raw_mail_data.columns.values)

raw_mail_data.rename(columns={"v1": "Category", "v2": "Message"}, inplace=True)

list(raw_mail_data.columns.values)

# REPLACE THE NULL VALUES WITH THE NULL STRING
mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')

# PRINTING THE FIRST 5 ROWS OF THE DATAFRAME
mail_data.head(5)

# CHECKING THE NUMBER OF ROWS AND COLUMNS(SIZE) IN THE DATAFRAME
mail_data.shape

""" LABEL ENCODING THAT IS MAKING SPAM AS ZERO AND HAM AS ONE

"""

# LABEL SPAM MAIL AS 0 ; HAM MAIL AS 1;
# taking the mail_data dataframe and we are going to locate few values
# that is in the dataframe consider category column and if the text in the category column is spam then read all the values with 0
mail_data.loc[mail_data['Category'] == 'spam', 'Category',] = 0

# similarly for ham
mail_data.loc[mail_data['Category'] == 'ham', 'Category',] = 1

"""spam = 0 and ham = 1"""

# here we seperate the labels and the messages that is as text and labels
# x axis value is text and y axis value is the labels
X =  mail_data['Message']

Y = mail_data['Category']

print(X)

print(Y)

"""SPLITING INTO TRAINING DATA SET AND TESTING DATA SET

"""

# test_size is amount of data needed for training the data set i.e 20% to the testing i.e out of 5571 - 20% will go to testing
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)

# print the number of rows and columns

print(X.shape)
# out of 5572 80% is used to train
print(X_train.shape)
# out of 5572 20% is used to test
print(X_test.shape)

"""FEATURE EXTRACTION

USING TfidfVectorizer FOR CONVERTING TEST DATA INTO NUMERICAL DATA
since the model does not understand text data
hence we convert the text data into meaningfull numerical values

"""

# Transform the text data to feature vectors that can be used as input to the logistic regression model
# TfidfVectorizer looks at the messages and we can say all the spam mail may contain words like free etc
# so TfidfVectorizer go through all the words, if the word is repeated 1000 times it will get higher score if the word is repeated 100 times then it;s score will be less
# and this score is used by the model to find which mail can be spam or ham
# paramter min_df is used if the score of a particular word is less than 1 then we need to ignore it ( word repeated only once)
# if the score is more than 1 then we need to include it
# stop_words are those words that will be repeated multiple times in a document eg this, is, and these are stop words
# stop_words= english will contain all the words that are not nessasary for prediction
# lowercase = true will change all the letters to lower case for easier prediction


# we dont need to convert y_train and y_test since all thse are numbers hence we only convert x_train and x_test
# here we convert all the x_train messages in number as X_train_features

feature_extraction = TfidfVectorizer(min_df = 1, stop_words='english', lowercase=True)

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# convert Y_train and Y_test values as integers

Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

# the data which is not transformed
print(X_train)

# X_train_features will contain the numerical values
print(X_train_features)

"""TRAINING THE LOGICTIC REGRESSION MODEL ie. MACHINE LEARNING MODEL

---


"""

# loading the logistic regression model
model = LogisticRegression()

# training the logistic regression model
# X_train_features is x axis and y axis is y_train
model.fit(X_train_features, Y_train)

"""EVALUATING THE TRAINED LOGISTIC REGRESSSION MODEL"""

# prediction on training data
# we are going to give the model X_train_features and see if it is predicting the correct y_train

prediction_on_training_data = model.predict(X_train_features)

# comparing the values predictd by the model and true values
# y_train is the true values and predicted values is prediction_on_training_data
accuracy_on_training_data = accuracy_score(Y_train,prediction_on_training_data)

print('Accuracy on training data is : ', accuracy_on_training_data )
# out of 100 different mails the model is correctly predicting 96 mails

# prediction on test data
# we are going to give the model X_test_features and see if it is predicting the correct y_train

prediction_on_test_data = model.predict(X_test_features)

# comparing the values predictd by the model and true values
# y_test is the true values and predicted values is prediction_on_training_data
accuracy_on_test_data = accuracy_score(Y_test,prediction_on_test_data)

print('Accuracy on test data is : ', accuracy_on_test_data )
# out of 100 different mails the model is correctly predicting 96 mails

"""Overfitting :  the accuracy of training data will be very good but when predicting for the test data we get very minium accuracy score
eg. if the training data accuracy is 90% and testing accuracy is 60% then the model is overfitted, i.e the model has over trained from the data

BUILDING A PREDICTIVE SYSTEM
"""

input_mail = ["U dun say so early hor... U c already then say...,,,"]

# to convert the above text to numerical(feature_vectors) we use feature_extraction
input_data_features = feature_extraction.transform(input_mail)

# making prediction
prediction = model.predict(input_data_features)
print(prediction)

if prediction[0] == 1:
  print("The input mail is a : Ham mail!!")
else :
  print('The input mail is a : Spam mail!')